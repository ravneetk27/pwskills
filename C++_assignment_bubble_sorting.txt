Ans 1 : option 2 

Ans 2 : option 3 [1, 2, 5, 4, 3, 6].

Ans 3 : option 3 when the array is sorted in increasing order.

Ans 4 :
#include <iostream>
using namespace std;

void bubbleSortDescending(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] < arr[j + 1]) {
                // Swap arr[j] and arr[j+1]
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int arr[] = {1, 6, 2, 5, 4, 3};
    int n = sizeof(arr) / sizeof(arr[0]);

    bubbleSortDescending(arr, n);

    cout << "Array sorted in descending order: ";
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;

    return 0;
}


Ans 5 :
#include <iostream>
using namespace std;

bool isAlmostSorted(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        if (arr[i] > arr[i + 1]) {
            // Check if swapping arr[i] and arr[i + 1] would fix the order
            if (i + 1 < n && arr[i] < arr[i + 2]) {
                swap(arr[i], arr[i + 1]);
            } else {
                return false;
            }
        }
    }
    return true;
}

int main() {
    int arr[] = {1, 3, 2, 4, 5, 6};
    int n = sizeof(arr) / sizeof(arr[0]);

    if (isAlmostSorted(arr, n)) {
        cout << "The array is almost sorted." << endl;
    } else {
        cout << "The array is not almost sorted." << endl;
    }

    return 0;
}

