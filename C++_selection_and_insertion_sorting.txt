Solution of assignment selection and insertion sorting

Ans 1 : option a and b

Ans 2 : option d

Ans 3 : option c. 4

Ans 4 :
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int findMinSum(vector<int>& digits) {
    sort(digits.begin(), digits.end());
    int num1 = 0, num2 = 0;

    for (int i = 0; i < digits.size(); i++) {
        if (i % 2 == 0)
            num1 = num1 * 10 + digits[i];
        else
            num2 = num2 * 10 + digits[i];
    }
    return num1 + num2;
}

int main() {
    vector<int> digits = {6, 8, 4, 5, 2, 3};
    cout << "Minimum possible sum: " << findMinSum(digits) << endl;
    return 0;
}


Ans 5 :
#include <iostream>
#include <string>
using namespace std;

void bubbleSortStrings(string arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}

int main() {
    string arr[] = {"apple", "orange", "banana", "grape", "pear"};
    int n = sizeof(arr) / sizeof(arr[0]);

    bubbleSortStrings(arr, n);

    cout << "Sorted array of strings: ";
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;

    return 0;
}
